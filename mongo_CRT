 _____________________________________________________________________________________________
## test.robot

*** Settings ***
Library                        ./mongo.py
Library                    Collections
*** Variables ***
${user}=                       crttest
${pw}=                         mongodb
${cluster}=                    crtcluster.yoglmny.mongodb.net
${DBNAME}=                     crtdatabase
${COLLECTION}=                 crtcollection

*** Test Cases ***
Connect To MongoDB And Perform Operations
    # Connect to the database
    Connect                    uri=mongodb+srv://${USER}:${PW}@${CLUSTER}              dbname=${DBNAME}

    # Find records
    ${records}=                Find Records                ${COLLECTION}               Name                        John
    Log                        ${records}

    # Insert a new record
    ${new_record}=             Create Dictionary           Name=Jane                   Age=30
    ${inserted_id}=            Insert Record               ${COLLECTION}               ${new_record}
    Log                        Inserted record with ID: ${inserted_id}

              
    # Update records
    ${update_query}=           Create Dictionary           Name=Jane
    ${new_values}=             Create Dictionary           Age=31
    ${modified_count}=         Update Records              ${COLLECTION}               ${update_query}             ${new_values}
    Log                        Updated ${modified_count} records.

    # Delete records
    ${delete_query}=           Create Dictionary           Name=Jane
    ${deleted_count}=          Delete Records              ${COLLECTION}               ${delete_query}
    Log                        Deleted ${deleted_count} records.

    # Define the scores list outside the dictionary
    @{scores}=                 Create List                 85                          95                          75


    # Create a complex record with an array and nested object, passing the date as a string
    ${new_complex_record}=     Create Dictionary           name=Andrea Le              email=andrea_le@fake-mail.com                version=5
    ...                        scores=@{scores}

    # Insert the list in data
    ${inserted_id1}=           Insert Record               ${COLLECTION}               ${new_complex_record}
    Log                        Inserted complex record with ID: ${inserted_id1}


    #inserting date in data
    ${new_complex_record2}=    Create Dictionary           name=dev Le                 email=dev_le@fake-mail.com                   version=9
    ...                        dateCreated=2003-03-26

    ${inserted_id2}=           Insert Record               ${COLLECTION}               ${new_complex_record2}
    Log                        Inserted complex record with ID: ${inserted_id2}


    ##logical operation

    #Find record using Match by Multiple Conditions ($AND)
    ${query}=                  Evaluate                    {'$and': [{'scores': 75}, {'name': 'Greg Powell'}]}     json

    ${records}=                Logical Oper Query          ${COLLECTION}               ${query}

    # Find record using Match by Multiple Conditions ($OR)
    ${query1}=                 Evaluate                    {'$or': [{'version': 4}, {'name': 'Andrea Le'}]}
    ${records}=                Logical Oper Query          ${COLLECTION}               ${query1}

    # Find record using Match by Multiple Conditions ($NOT)
    ${query2}=                 Evaluate                    {'name': {'$not': {'$eq': 'Andrea Le'}}}
    ${records}=                Logical Oper Query          ${COLLECTION}               ${query2}

    # Find record using Match by Multiple Conditions ($lt)
    ${query3}=                 Evaluate                    {'version': {'$lte': 4}}
    ${records}=                Logical Oper Query          ${COLLECTION}               ${query3}

    # Find record using Match by Multiple Conditions ($lt,$gt)
    ${query4}=                 Evaluate                    {'scores': {'$elemMatch': {'$gt': 80, '$lt': 90}}}
    ${records}=                Logical Oper Query          ${COLLECTION}               ${query4}

    # Find record using Match by Multiple Conditions ($regex)
    ${query5}=                 Evaluate                    {'email': {'$regex': 'andrea_le'}}
    ${records}=                Logical Oper Query          ${COLLECTION}               ${query5}


      #Insert multiple records 
       
    @{documents}=              Create List
    &{doc1}=                   Create Dictionary           name=Alice                  email=alice@example.com
    &{doc2}=                   Create Dictionary           name=Bob                    email=bob@example.com
    &{doc3}=                   Create Dictionary           name=Charlie                email=charlie@example.com
    Append To List             ${documents}                ${doc1}
    Append To List             ${documents}                ${doc2}
    Append To List             ${documents}                ${doc3}
    ${inserted_ids}=           Insert Many                ${COLLECTION}               ${documents}
    Log                        Inserted records with IDs: ${inserted_ids}


    #Cleanup created records
    ${deleted_all}=          Delete Records              ${COLLECTION}               ${inserted_id}
     Log                        Deleted  ${deleted_all} records. 

    # Disconnect from the database
    Disconnect

____________________________________________________________________________________________

## mongo.py

from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from robot.api import logger
from bson import ObjectId


class mongo():
    client = None
    db = None  # Add this line to store the database object

    def __init__(self):
        pass

    def connect(self, uri, dbname):
        if self.client is None:
            self.client = MongoClient(uri, server_api=ServerApi('1'))
        try:
            self.client.admin.command('ping')
            self.db = self.client[dbname]  # Select the database
            logger.info("Pinged your deployment. You successfully connected to MongoDB!", also_console=True)
        except Exception as e:
            logger.error(e)

    def disconnect(self):
        if self.client is not None:
            self.client.close()

    def find_records(self, collection_name, key, value):
        collection = self.db[collection_name]
        query = {key: value}
        documents = collection.find(query)
        results = []
        for doc in documents:
            results.append(doc)
            logger.info(str(doc), also_console=True)
        return results

    def insert_record(self, collection_name, data):
        collection = self.db[collection_name]
        result = collection.insert_one(data)
        logger.info(f"Inserted record with id {result.inserted_id}", also_console=True)
        return result.inserted_id

    def update_records(self, collection_name, query, new_values):
        collection = self.db[collection_name]
        result = collection.update_many(query, {'$set': new_values})
        logger.info(f"Updated {result.modified_count} records.", also_console=True)
        return result.modified_count

    def delete_records(self, collection_name, query):
        collection = self.db[collection_name]
        result = collection.delete_many(query)
        logger.info(f"Deleted {result.deleted_count} records.", also_console=True)
        return result.deleted_count    

    # def delete_records2(self, collection_name, query):
    #     collection = self.db[collection_name]
    #     result = collection.delete_many(query)
    #     logger.info(f"Deleted {result.deleted_count} records.", also_console=True)
    #     return result.deleted_count    

    def Logical_oper_query(self, collection_name, query):
        collection = self.db[collection_name]
        documents = collection.find(query)
        results = []
        for doc in documents:
            results.append(doc)
            logger.info(str(doc), also_console=True)
        return results

    def insert_many(self, collection_name, documents):
        """Insert multiple documents into a MongoDB collection."""
        collection = self.db[collection_name]
        try:
            result = collection.insert_many(documents)
            return [str(id) for id in result.inserted_ids]
        except BulkWriteError as e:
            print("Bulk write error occurred:", e.details)
            return None    

    def delete(self, collection_name, filter):
        if isinstance(filter.get('_id'), str):
           filter['_id'] = ObjectId(filter['_id'])
           collection = self.db[collection_name]
           result = collection.delete_one(filter)
        return result.deleted_count

____________________________________________________________________________________-
## requirement.txt
pymongo
_____________________________________________--




